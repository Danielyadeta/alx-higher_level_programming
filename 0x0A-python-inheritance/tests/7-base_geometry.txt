The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

Importing the function from the module:
        >>> BG = __import__("7-base_geometry").BaseGeometry

Checking for module docstring:
         >>> m = __import__("7-base_geometry").__doc__
         >>> len(m) > 1
         True

Checking for class docstring:
         >>> c = __import__("7-base_geometry").BaseGeometry.__doc__
         >>> len(c) > 1
         True

Checking for method docstring:
	  >>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
	  >>> len(mod1) > 1
	  True
	  >>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
          >>> len(mod2) > 1
          True

Checking for integer with zero value:
	  >>> b.integer_validator("integer", 0)
	  Traceback (most recent call last):
          ...
          ValueError: integer must be greater than 0

Checking for negative integer:
	  >>> b.integer_validator("integer", -5)
	  Traceback (most recent call last):
          ...
          ValueError: integer must be greater than 0

Checking for non-integer:
	  >>> b.integer_validator("bool", True)
	  Traceback (most recent call last):
          ...
          TypeError: bool must be an integer

Checking for no arguments:
	  >>> b.integer_validator()
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for only one arguemnt:
	  >>> b.integer_validator("integer")
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() missing 1 required positional argument: 'value'

Checking for too many arguments:
	  >>> b.integer_validator("integer", 1, 2)
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() takes 3 positional arguments but 4 were given
